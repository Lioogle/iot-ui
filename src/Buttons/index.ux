<template>
  <!-- template里只能有一个根节点 -->
  <div class="box" style="height:{{height+'px'}};backgroundColor:{{config.backgroundColor}}">
    <block for="{{data}}">
      <div class="button" style="width:{{width+'%'}}; padding-top:{{config.paddingTop+'px'}}; padding-bottom:{{config.paddingBottom+'px'}}"
        @click="click($idx,$item)">
        <div class="button-icon">
          <image src="{{$item.icons[$item.value].url}}" style="width:{{config.iconWidth+'px'}};height:{{config.iconWidth+'px'}};border-radius:{{config.iconWidth+'px'}}"></image>

        </div>
        <div class="button-text" if="{{config.showText}}" style="height:{{config.textHeight+'px'}}">
          <text style="color:{{$item.icons[$item.value].fontColor?$item.icons[$item.value].fontColor:'#000000'}}">{{$item.icons[$item.value].name}}</text>

        </div>

      </div>
    </block>

  </div>

</template>

<style>
  .box {
    width: 100%;

    flex-wrap: wrap;
    position: fixed;
    bottom: 0;

  }

  .button {

    justify-content: center;
    flex-wrap: wrap;


  }

  .button-icon,
  .button-text {
    width: 100%;
    justify-content: center;
    align-items: center;
  }
</style>

<script>
  import prompt from '@system.prompt'

  let defaultConfig = {
    showText: false,
    componentHeight: 0,
    backgroundColor: '#ffffff',
    column: 4,
    iconWidth: 150,
    textHeight: 50,
    paddingTop: 20,
    paddingBottom: 20
  };
  export default {

    data() {
      return {
        height: 0,
        width: 25

      }
    },
    props: {
      config: {
        default: defaultConfig
      },
      data: {
        default: []
      }
    },
    onInit() {
      for (let key in defaultConfig) {
        if (this.config[key] === undefined) {
          this.config[key] = defaultConfig[key];
        }

      }
      this.calculateHeight();
      this.$watch('config', 'configChange');



    },
    configChange() {

      this.calculateHeight();

    },
    calculateHeight() {
      let len = this.data.length;
      let { column, iconWidth, textHeight, paddingTop, paddingBottom } = this.config;

      this.width = 100 / column;

      let height;

      if (this.config.showText) {
        height = parseInt((len + column - 1) / column) * (iconWidth + textHeight + paddingTop + paddingBottom);
      } else {
        height = parseInt((len + column - 1) / column) * (iconWidth + paddingTop + paddingBottom);

      }
      this.height = height;
      this.config.componentHeight = height;


    },
    click(index, item) {

      if (!item['disabled'] && item['click']) {
        item['click'](item);

      }

    }
  }
</script>